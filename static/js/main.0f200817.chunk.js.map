{"version":3,"sources":["components/Todos.js","App.js","serviceWorker.js","index.js"],"names":["Todos","_useState","useState","_useState2","Object","slicedToArray","todoText","setTodoText","_useState3","id","text","isCompleted","_useState4","todos","setTodos","react_default","a","createElement","className","type","placeholder","value","onChange","e","target","ChangeTodoText","onClick","newTodo","uuidv4","concat","toConsumableArray","map","todo","key","checked","updateTodo","completeTodo","filter","DeleteTodo","App","components_Todos","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAqFeA,EAlFD,WAAK,IAAAC,EACiBC,mBAAS,IAD1BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACRK,EADQH,EAAA,GACEI,EADFJ,EAAA,GAAAK,EAEUN,mBAAS,CAC9B,CACIO,GAAG,EACHC,KAAM,SACNC,aAAa,GAEjB,CACIF,GAAG,EACHC,KAAM,WACNC,aAAa,KAXNC,EAAAR,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAERK,EAFQD,EAAA,GAEFE,EAFEF,EAAA,GAiDf,OACAG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOD,UAAU,eAAeE,YAAY,cAAcC,MAAOf,EAAUgB,SAAU,SAACC,GAAD,OAvC/E,SAACA,GAEnBhB,EAAYgB,EAAEC,OAAOH,OAqCkFI,CAAeF,MACzHR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACZH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBQ,QApCpB,WAEZ,IAAMC,EAAU,CAChBlB,GAAImB,cACJlB,KAAMJ,EACNK,aAAY,GAGhBG,EAAQ,CAAEa,GAAFE,OAAAzB,OAAA0B,EAAA,EAAA1B,CAAaS,KACrBN,EAAY,MA2BZ,UAKAQ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BAEVL,EAAMkB,IAAI,SAAAC,GACN,OACCjB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iDAAiDe,IAAKD,EAAKvB,IAC1EM,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWe,QAASF,EAAKrB,YAAaW,SAAU,kBApCpD,SAACb,GAEjB,IAAM0B,EAAatB,EAAMkB,IAAI,SAACC,GAC1B,OAAGA,EAAKvB,KAAOA,GAEXuB,EAAKrB,aAAc,EACZqB,GAEJA,IAIXlB,EAASqB,GAwB+DC,CAAaJ,EAAKvB,OAClFM,EAAAC,EAAAC,cAAA,QAAMC,UAAWc,EAAKrB,YAAc,YAAa,MAChDqB,EAAKtB,OAGLK,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBQ,QAAS,kBA3BtC,SAACjB,GACjB,IAAM0B,EAAatB,EAAMwB,OAAO,SAAAL,GAAI,OAAIA,EAAKvB,KAAOA,IACnDK,EAASqB,GAyBkDG,CAAWN,EAAKvB,MAAlE,aC5DF8B,MAVf,WACE,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2DACfH,EAAAC,EAAAC,cAACuB,EAAD,SCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACPhC,EAAAC,EAAAC,cAACF,EAAAC,EAAMgC,WAAP,KACEjC,EAAAC,EAAAC,cAACgC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAK,SAAAC,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME","file":"static/js/main.0f200817.chunk.js","sourcesContent":["import React,{useState} from 'react';\n//import uuidv4 from 'uuid/v4';\nimport { v4 as uuidv4 } from 'uuid';\nconst Todos = () =>{\n    const [todoText, setTodoText] = useState(\"\");\n    const [todos,setTodos] = useState([\n        {\n            id:1,\n            text: \"coding\",\n            isCompleted: false\n        },\n        {\n            id:2,\n            text: \"gamingin\",\n            isCompleted: true\n        }\n    ]);\n    const ChangeTodoText =(e) =>{\n       // console.log(e.target.value);\n        setTodoText(e.target.value);\n       \n    };\n    const AddTodoText = () =>{\n          \n            const newTodo = {\n            id: uuidv4(),\n            text: todoText,\n            isCompleted:false\n        }; \n        //console.log(newTodo);\n        setTodos([newTodo,...todos]);\n        setTodoText(\"\");\n    };\n    const completeTodo =(id) =>{\n       // console.log(id);\n        const updateTodo = todos.map((todo)=>{\n            if(todo.id === id)\n            {\n                todo.isCompleted = true;\n                return todo;\n            }\n            return todo;\n\n        });\n       // console.log(updateTodo);\n        setTodos(updateTodo);\n    };\n    const DeleteTodo = (id) =>{\n       const updateTodo = todos.filter(todo => todo.id !== id);\n        setTodos(updateTodo); \n       \n    }\n    return(\n    <div className=\"card\">\n     <div className=\"card-header\">\n    <div className=\"input-group mb-3\">\n        <input type=\"text\" className=\"form-control\" placeholder=\"Enter todos\" value={todoText} onChange={(e)=> ChangeTodoText(e)}  />\n     <div className=\"input-group-append\">\n        <button className=\"btn btn-primary\" onClick={AddTodoText}>Add</button>\n    </div>\n    </div>\n</div>\n        \n        <ul className=\"list-group list-group-flush\">\n        {\n            todos.map(todo =>{\n                return(\n                 <li className=\"list-group-item d-flex justify-content-between\" key={todo.id}>\n                <div>\n                <input type=\"checkbox\" checked={todo.isCompleted} onChange={()=>completeTodo(todo.id)}/>\n                <span className={todo.isCompleted ? 'completed': null}>\n                {todo.text}\n                </span>\n                </div>\n                 <button className=\"btn btn-danger\" onClick={() => DeleteTodo(todo.id)}>Del</button>\n                 </li>\n                ); \n            })\n        }\n        </ul>\n    \n    </div>\n    );\n};\n\nexport default Todos;\n","import React from 'react';\nimport './App.css';\nimport Todos from './components/Todos';\n\nfunction App() {\n  return (\n    <div className=\"container-fulid vw-100 vh-100\">\n    <div className=\"d-flex justify-content-center align-items-center vh-100\">\n    <Todos />     \n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}